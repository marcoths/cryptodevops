# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout working branch
        uses: actions/checkout@v2
      
      - name: Set Docker Registry
        run: echo ::set-env name=DOCKER_REGISTRY::eu.gcr.io
      
      - name: Set Docker image
        run: echo ::set-env name=DOCKER_IMAGE::${{ env.DOCKER_REGISTRY }}/hello-marco-k8s/my_litecoin
      
      - name: Login to gcloud
        id: gcloud
        uses: elgohr/gcloud-login-action@0.2
        with:
          account_key: ${{ secrets.GCLOUD_KEY }}
      
      - name: Publish Image
        uses: elgohr/Publish-Docker-Github-Action@2.14
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        with:
          name: ${{ env.DOCKER_IMAGE }}
          username: ${{ steps.gcloud.outputs.username }}
          password: ${{ steps.gcloud.outputs.password }}
          registry: ${{ env.DOCKER_REGISTRY }}
          buildargs: SSH_PRIVATE_KEY
  deployment:
    name: Deploy image to cluster
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout  working branch
        uses: actions/checkout@v2
      
      - name: Set Cluster Credentials
        run: |
          echo ::set-env name=CLUSTER_NAME::litecoin-test
          echo ::set-env name=CLUSTER_REGION::us-central1
          echo ::set-env name=PROJECT_NAME::hello-marco-k8s
      
      - name: Install Kubectl
        run: |
          sudo apt-get install kubectl
      
      - name: Deploy to cluster
        env:
          GCLOUD_KEY: ${{ secrets.GCLOUD_KEY }}
        run: |
          echo "$GCLOUD_KEY" | base64 -D >> ${HOME}/gcloud.json
          gcloud auth activate-service-account --key-file=${HOME}/gcloud.json
          gcloud auth configure-docker
          gcloud container clusters get-credentials \
          ${{ env.CLUSTER_NAME }} --project ${{ env.PROJECT_NAME }} \
          --region ${{env.CLUSTER_REGION }}
          
          kubectl apply -f ./manifests/stateful-set.yaml
